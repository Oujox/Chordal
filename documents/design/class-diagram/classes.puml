@startuml classes
set namespaceSeparator none
class "BaseChord" as euterpe.chord._base.BaseChord {
}
class "BaseNote" as euterpe.note._base.BaseNote {
}
class "BaseScale" as euterpe.scale._base.BaseScale {
  diatonics
}
class "BaseTuner" as euterpe.tuner._base.BaseTuner {
  {abstract}hz(notenumber: int) -> float
}
class "Chord" as euterpe.chord.chord.Chord {
  on
  quality
  root
  is_chord(chord: t.Any) -> t.TypeGuard[str]
}
class "ChordElement" as euterpe._core.schema.ChordElement {
  on : str | None
  quality : Quality | None
  root : str | None
}
class "Context" as euterpe._core.framework.context.Context {
  data : t.ClassVar[ContextVar[dict[str, t.Any]]]
  setting : t.ClassVar[ContextVar[Setting]]
}
class "Euterpe" as euterpe.utils.euterpe.Euterpe {
  name : str
  setting
  Chorus()
  Compressor()
  Deray()
  Distortion()
  Equalizer()
  Flanger()
  Looper()
  PitchShift()
  Reverb()
  Track()
  Tremolo()
  WorkSpace()
}
class "EuterpeObject" as euterpe._core.object.EuterpeObject {
  schema
  setting
}
class "EuterpeTrackReturn" as euterpe.utils.euterpe.EuterpeTrackReturn {
  track : list[int]
}
class "InjectedMeta" as euterpe._core.framework.inject.InjectedMeta {
  inject(func: t.Callable[P, R]) -> t.Callable[P, R]
}
class "InstanceCacheMeta" as euterpe._core.framework.instancecache.InstanceCacheMeta {
}
class "Intervals" as euterpe._core.shared.intervals.Intervals {
  downward(index: int, step: int)
  upward(index: int, step: int)
}
class "Key" as euterpe.note.key.Key {
  accsidentals
  pitchclass
  pitchname
  is_keyname(value: t.Any) -> t.TypeGuard[str]
}
class "Mode" as euterpe.scale.mode.Mode {
}
class "Note" as euterpe.note.note.Note {
  notename
  notenames
  notenumber
  scale
  is_notename(notename: t.Any) -> t.TypeGuard[str]
  is_notenumber(notenumber: t.Any) -> t.TypeGuard[int]
}
class "OptimizedMeta" as euterpe._core.framework.optimize.OptimizedMeta {
}
class "PitchClass" as euterpe.note.pitchclass.PitchClass {
  pitchclass
  pitchname
  pitchnames
  scale
  is_pitchclass(pitchclass: t.Any) -> t.TypeGuard[int]
  is_pitchname(pitchname: t.Any) -> t.TypeGuard[str]
}
class "Quality" as euterpe.chord.quality.Quality {
  components : tuple[QualityComponent]
  intervals
  name
  reversed
}
class "QualityComponent" as euterpe.chord.quality.QualityComponent {
  alterations : dict[int, int]
  brackets : bool
  diminution : tuple[int]
  enable : tuple[int]
  extensions : tuple[int]
  group : int
  index : int
  intervals : tuple[int]
  name : str
}
class "Scale" as euterpe.scale.scale.Scale {
  accidentals
  diatonics
  intervals
  key
  omits
  positions
}
class "Schema" as euterpe._core.schema.Schema {
  interval2qualities
  intervals
  name2quality
  notenames
  notenumbers
  pitchclasses
  pitchnames
  positions
  ref_notenumber
  root
  root_notenumber
  semitone
  symbols
  convert_notename_to_notenumber(notename: str) -> int
  convert_notename_to_pitchname(notename: str) -> str
  convert_notenumber_to_notename(notenumber: int, accidental: int) -> t.Optional[str]
  convert_notenumber_to_notenames(notenumber: int) -> tuple[t.Optional[str]]
  convert_notenumber_to_pitchclass(notenumber: int) -> int
  convert_pitchclass_to_notenumber(pitchclass: int, octnumber: int) -> int
  convert_pitchclass_to_pitchname(pitchclass: int, accidental: int) -> t.Optional[str]
  convert_pitchclass_to_pitchnames(pitchclass: int) -> tuple[t.Optional[str]]
  convert_pitchclass_to_symbol(pitchclass: int) -> t.Optional[str]
  convert_pitchname_to_notename(pitchname: str, octnumber: int) -> str
  convert_pitchname_to_picthclass(pitchname: str) -> int
  convert_pitchname_to_symbol(pitchname: str)
  find_pitchname(value: str) -> str | None
  generate_key_accidentals(pitchname: str) -> tuple[int]
  generate_scale_accidentals(intervals: tuple[int]) -> tuple[int]
  is_notename(value: t.Any) -> t.TypeGuard[str]
  is_notenumber(value: t.Any) -> t.TypeGuard[int]
  is_pitchclass(value: t.Any) -> t.TypeGuard[int]
  is_pitchname(value: t.Any) -> t.TypeGuard[str]
  is_symbol(value: t.Any) -> t.TypeGuard[str]
  parse_chord(name: str) -> ChordElement
}
class "Setting" as euterpe._core.setting.Setting {
  note : NoteSetting
  pitchclass : PitchClassSetting
  default() -> t.Self
  from_dict(value: dict[str, t.Any]) -> t.Self
  from_json(path: Path) -> t.Self
  from_toml(path: Path) -> t.Self
}
class "Track" as euterpe.utils.track.Track {
}
class "Tuner" as euterpe.tuner.tuner.Tuner {
  hz(notenumber: int) -> float
}
class "classproperty" as euterpe._core.utils.decorators.classproperty {
}
euterpe.chord.chord.Chord --|> euterpe._core.object.EuterpeObject
euterpe.chord.chord.Chord --|> euterpe.chord._base.BaseChord
euterpe.note.key.Key --|> euterpe._core.object.EuterpeObject
euterpe.note.key.Key --|> euterpe.note._base.BaseNote
euterpe.note.note.Note --|> euterpe._core.object.EuterpeObject
euterpe.note.note.Note --|> euterpe.note._base.BaseNote
euterpe.note.pitchclass.PitchClass --|> euterpe._core.object.EuterpeObject
euterpe.note.pitchclass.PitchClass --|> euterpe.note._base.BaseNote
euterpe.scale.scale.Scale --|> euterpe._core.object.EuterpeObject
euterpe.scale.scale.Scale --|> euterpe.scale._base.BaseScale
euterpe.tuner.tuner.Tuner --|> euterpe._core.object.EuterpeObject
euterpe.tuner.tuner.Tuner --|> euterpe.tuner._base.BaseTuner
euterpe._core.setting.Setting --* euterpe._core.object.EuterpeObject : _setting
euterpe._core.setting.Setting --* euterpe._core.schema.Schema : _setting
euterpe._core.setting.Setting --* euterpe.utils.euterpe.Euterpe : setting
euterpe.chord.quality.Quality --* euterpe.chord.chord.Chord : _quality
euterpe.note.key.Key --* euterpe.scale.scale.Scale : _key
@enduml
